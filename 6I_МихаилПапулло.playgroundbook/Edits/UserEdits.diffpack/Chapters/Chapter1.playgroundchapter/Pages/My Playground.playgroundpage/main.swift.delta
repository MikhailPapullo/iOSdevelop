<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Diffs</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>//1. Реализовать свой тип коллекции «очередь» (queue) c использованием дженериков.
//2. Добавить ему несколько методов высшего порядка, полезных для этой коллекции (пример: filter для массивов)
//3. * Добавить свой subscript, который будет возвращать nil в случае обращения к несуществующему индексу.


struct Queue&lt;T: Comparable&gt; {
    var array:[T] = []
    
    var isEmpty: Bool {
        return array.isEmpty
    }
    var peek: T? {
        return array.first
    }
    mutating func enqueue(_ element: T) {
        array.append(element)
    }
    mutating func dequeue() -&gt; T? {
        return isEmpty ? nil : array.removeFirst()
    }
    func filter(element: T) {
        print("Found \(array.filter{$0 == element})")
    }
    mutating func properlySort() -&gt; [T] {
        return array.sorted(by: &lt;)
    }
    subscript (index: Int) -&gt; T? {
        return (index &lt; array.count ? array[index] : nil)
    }
    func printCount() {
        print(array.count)
    }
}

extension Queue : CustomStringConvertible {
    var description: String {
        return String(describing: array)
    }
}

var queue = Queue&lt;Int&gt;()
queue.enqueue(2)
queue.enqueue(7)
queue.enqueue(2)
queue.enqueue(39)
queue.enqueue(15)
queue.filter(element: 7)
print(queue.array)

print("Очередь из:")
queue.printCount()

print("Отсортированный: \(queue.properlySort())")

queue.dequeue()
print(queue)

print("После удаления:")
queue.printCount()
</string>
			<key>ModifiedRange</key>
			<string>{1, 1422}</string>
			<key>OriginalContent</key>
			<string></string>
			<key>OriginalRange</key>
			<string>{1, 0}</string>
		</dict>
	</array>
	<key>FormatVersion</key>
	<integer>2</integer>
</dict>
</plist>
