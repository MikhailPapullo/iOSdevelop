<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Diff</key>
	<array>
		<dict>
			<key>ModifiedContent</key>
			<string>//1. Создать протокол «Car» и описать свойства, общие для автомобилей, а также метод действия.
//2. Создать расширения для протокола «Car» и реализовать в них методы конкретных действий с автомобилем: открыть/закрыть окно, запустить/заглушить двигатель и т.д. (по одному методу на действие, реализовывать следует только те действия, реализация которых общая для всех автомобилей).
//3. Создать два класса, имплементирующих протокол «Car» - trunkCar и sportСar. Описать в них свойства, отличающиеся для спортивного автомобиля и цистерны.
//4. Для каждого класса написать расширение, имплементирующее протокол CustomStringConvertible.
//5. Создать несколько объектов каждого класса. Применить к ним различные действия.
//6. Вывести сами объекты в консоль.

enum windows {
    case open, closed
}
enum engine {
    case on, off
}
enum passengers {
    case occupied, vacant
}
enum cargo {
    case full, empty
}

protocol Car {
    var brand: String {get}
    var year: Int {get}
    var windowsState: windows {get set}
    var engineState: engine {get set}
    }
extension Car {
    mutating func changeWindowsState(windowsState: windows) {
        self.windowsState = windowsState
    }
    mutating func changeEngineState(engineState: engine) {
        self.engineState = engineState
    }
}
class baseCar : Car {
    var brand: String
    var year: Int
    var windowsState: windows = .closed
    var engineState: engine = .off
    init(brand: String, year: Int) {
        self.brand = brand
        self.year = year
    }
}
class sportCar: baseCar, CustomStringConvertible {
    var occupation: passengers = .vacant
    var description: String {
        return "Окна \(windowsState), Двигатель \(engineState), пассажиры: \(occupation)"
    }
}
class trunkCar: baseCar, CustomStringConvertible {
    var workload: cargo = .empty
    var description: String {
        return "Окна \(windowsState), Двигатель \(engineState), загрузка: \(workload)"
    }
}
var LadaSamara = sportCar(brand: "Lada Samara", year: 1990)
var Kamaz55111 = trunkCar(brand: "Kamaz 55111", year: 1995)
print(LadaSamara.brand, LadaSamara.year)
LadaSamara.changeEngineState(engineState: .on)
LadaSamara.occupation = .occupied
print(LadaSamara.description)
print("|-------------------------|")
print(Kamaz55111.brand, Kamaz55111.year)
Kamaz55111.changeWindowsState(windowsState: .open)
Kamaz55111.workload = .empty
print(Kamaz55111.description)
</string>
			<key>ModifiedRange</key>
			<string>{1, 2415}</string>
			<key>OriginalContent</key>
			<string></string>
			<key>OriginalRange</key>
			<string>{1, 0}</string>
		</dict>
	</array>
	<key>File</key>
	<string>Chapters/Chapter1.playgroundchapter/Pages/My Playground.playgroundpage/main.swift</string>
</dict>
</plist>
